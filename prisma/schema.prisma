generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  @@map("account")

  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sheet             Sheet?
  username          String?   @unique

  @@unique([provider, providerAccountId])
}

model Session {
  @@map("session")

  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  @@map("user")

  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  @@map("verificationtoken")

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  @@map("event")

  user      Sheet     @relation(fields: [username], references: [username], onDelete: Cascade)
  username  String
  eventName String

  single    String?
  mo_3      String?
  ao_5      String?
  ao_12     String?
  ao_25     String?
  ao_50     String?
  ao_100    String?
  ao_500    String?
  ao_1000   String?


  @@id([username, eventName])
}

model Sheet {
  @@map("sheet")

  wcaid             String?
  username          String      @id
  sheet             Account     @relation(fields: [username], references: [username], onDelete: SetNull)
  events            Event[]
}